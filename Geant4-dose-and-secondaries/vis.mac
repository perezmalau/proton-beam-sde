
# Open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
/vis/set/lineWidth 4

# Draw geometry:
/vis/drawVolume


# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 90. 90.

# Specify zoom value:
/vis/viewer/zoom 1.5

# Specify style (surface, wireframe, auxiliary edges,...)
#/vis/viewer/set/style wireframe
#/vis/viewer/set/auxiliaryEdge true
#/vis/viewer/set/lineSegmentsPerCircle 100

# Draw coordinate axes:
/vis/scene/add/axes 30 0 0 20 cm white true
/vis/viewer/set/auxiliaryEdge 1


# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
# /vis/modeling/trajectories/create/drawByCharge
# /vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
# /vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 1

# (if too many tracks cause core dump => /tracking/storeTrajectory 0)

# Draw hits at end of event:
/vis/scene/add/hits

# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma

# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true

# To select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
# To select or override default colours (note: e+ is blue by default):
#/vis/modeling/trajectories/list
#/vis/modeling/trajectories/drawByParticleID-0/set e+ yellow

# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose 0

# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
